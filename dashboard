<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Picload - My Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Playwrite+VN:wght@100..400&family=Roboto:ital,wght@0,100..900;1,100..900&family=Rufina:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Rufina';
            background: linear-gradient(135deg, #e0e7ff 0%, #b3c8d8 100%);
            background-attachment: fixed;
            color: #333;
            margin: 0;
            padding: 0;
            min-height: 100vh;
        }
        header {
            background: linear-gradient(135deg, #a855f7e6, #facc15e6);
            color: #fff;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        header .branding {
            font-size: x-large;
            font-weight: 600;
            opacity: 0.8;
            transition: opacity 0.3s ease;
        }
        header .branding:hover {
            opacity: 1;
        }
        header button {
            padding: 0.6rem 1.2rem;
            background: linear-gradient(135deg, #007AFF, #005BB5);
            color: #fff;
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
        }
        header button:hover {
            background: linear-gradient(135deg, #005BB5, #003087);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            transform: translateY(-1px);
        }
        header button:active {
            transform: translateY(1px);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);
        }
        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }
        .dashboard {
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            padding: 2rem;
        }
        h2 {
            font-size: 1.5rem;
            color: #222;
            margin-bottom: 1.5rem;
        }
        .photo-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
        }
        .photo-card {
            background: #f9f9f9;
            border-radius: 10px;
            overflow: hidden;
            text-align: center;
            padding: 1rem;
        }
        .photo-card img {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 5px;
        }
        .photo-card h3 {
            font-size: 1rem;
            color: #222;
            margin: 0.5rem 0;
        }
        .photo-card .tags {
            font-size: 0.85rem;
            color: #666;
            margin-bottom: 0.5rem;
        }
        .photo-card .actions {
            display: flex;
            justify-content: space-around;
        }
        .photo-card button {
            padding: 0.4rem 0.8rem;
            background: #ff4444;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
        }
        .photo-card button:hover {
            background: #cc0000;
        }
        .empty-message {
            text-align: center;
            color: #666;
            padding: 2rem;
        }
        .back-link {
            margin-top: 1.5rem;
            text-align: center;
        }
        .back-link a {
            color: #007AFF;
            text-decoration: none;
            font-weight: 500;
        }
        .back-link a:hover {
            text-decoration: underline;
        }
    </style>
    <script src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>
</head>
<body>
    <header>
        <div class="branding">
            PICLOAD
        </div>
        <button onclick="netlifyIdentity.logout()">Log Out</button>
    </header>
    <div class="container">
        <div class="dashboard">
            <h2>My Dashboard</h2>
            <div class="photo-grid" id="photoGrid"></div>
            <div class="empty-message" id="emptyMessage" style="display: none;">You havenâ€™t uploaded any photos yet. <a href="upload.html">Upload now</a>!</div>
        </div>
        <div class="back-link">
            <a href="index.html">Back to Gallery</a>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const photoGrid = document.getElementById('photoGrid');
            const emptyMessage = document.getElementById('emptyMessage');

            netlifyIdentity.on('init', user => {
                if (!user) {
                    window.location.href = 'signup.html';
                    return;
                }

                fetchUserPhotos(user.id);
            });

            netlifyIdentity.on('logout', () => {
                window.location.href = 'index.html';
            });

            async function fetchUserPhotos(userId) {
                try {
                    const response = await fetch(`/.netlify/functions/get-images?t=${Date.now()}`, {
                        headers: {
                            'Authorization': `Bearer ${netlifyIdentity.currentUser().token.access_token}`,
                        },
                    });
                    if (!response.ok) throw new Error('Failed to fetch photos');

                    const data = await response.json();
                    const userPhotos = data.filter(photo => photo.id.startsWith(`users/${userId}/`));

                    if (userPhotos.length === 0) {
                        emptyMessage.style.display = 'block';
                        photoGrid.style.display = 'none';
                        return;
                    }

                    emptyMessage.style.display = 'none';
                    photoGrid.style.display = 'grid';
                    photoGrid.innerHTML = userPhotos.map(photo => `
                        <div class="photo-card">
                            <img src="${photo.url.replace(/upload\/v\d+/, 'upload/w_200,h_150,c_thumb')}" alt="${photo.title}">
                            <h3>${photo.title}</h3>
                            <div class="tags">Tags: ${photo.tags.join(', ')}</div>
                            <div class="actions">
                                <button onclick="deletePhoto('${photo.id}')">Delete</button>
                            </div>
                        </div>
                    `).join('');

                    document.querySelectorAll('.photo-card button').forEach(button => {
                        button.addEventListener('click', (e) => {
                            e.stopPropagation(); // Prevent card click from triggering
                        });
                    });
                } catch (error) {
                    console.error('Error fetching photos:', error);
                    photoGrid.innerHTML = '<p>Error loading your photos. Try again later.</p>';
                }
            }

            async function deletePhoto(photoId) {
                if (confirm('Are you sure you want to delete this photo?')) {
                    try {
                        const response = await fetch(`https://api.cloudinary.com/v1_1/dpemqdflm/delete_by_public_id`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Basic ${btoa(`${process.env.CLOUDINARY_API_KEY}:${process.env.CLOUDINARY_API_SECRET}`)}`,
                            },
                            body: JSON.stringify({ public_id: photoId, invalidate: true }),
                        });

                        if (!response.ok) throw new Error('Failed to delete photo');

                        fetchUserPhotos(netlifyIdentity.currentUser().id); // Refresh the list
                    } catch (error) {
                        alert('Error deleting photo: ' + error.message);
                        console.error('Delete error:', error);
                    }
                }
            }
        });
    </script>
</body>
</html>
